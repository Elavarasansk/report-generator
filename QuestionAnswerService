package org.foryou.moodleconduct.service;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

import org.foryou.moodleconduct.constants.MooduleConductConstants;
import org.foryou.moodleconduct.dao.entity.QuestionAnswer;
import org.foryou.moodleconduct.dao.entity.QuestionBank;
import org.foryou.moodleconduct.dao.repository.QuestionAnswerRepo;
import org.foryou.moodleconduct.dao.vo.QuestionAnswerVo;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

@Service
public class QuestionAnswerService {

	@Autowired
	private QuestionAnswerRepo questionBankRepo;

	@Autowired
	private QuestionBankService questionBankService;

	public QuestionAnswer addQuestionAnswer(QuestionAnswerVo questionAnswerVo) {
		QuestionBank questionBank = questionBankService.getQuestionBank(questionAnswerVo.getQuestionBankId());
		QuestionAnswer questionAnswer = QuestionAnswer.builder()
				.questionBank(questionBank)
				.build();		
		BeanUtils.copyProperties(questionAnswerVo, questionAnswer);
		return questionBankRepo.save(questionAnswer);
	}

	public List<QuestionAnswer> addAllQuestionAnswer(List<QuestionAnswerVo> questionAnswerVoList) {
		List<QuestionAnswer> questionAnswerList = new ArrayList<>();
		List<String> questionBankList = questionAnswerVoList.stream().map(mapper->mapper.getQuestionBankName()).collect(Collectors.toList());
		Map<String, QuestionBank> questionBankMap = new HashMap<>();
		questionBankService.getQuestionBankList(questionBankList).stream().forEach(questionBank-> {
			questionBankMap.put(questionBank.getQuestionBankName(), questionBank);
		});		
		for( QuestionAnswerVo  questionAnswerVo  :  questionAnswerVoList ) {
			QuestionAnswer questionAnswer = QuestionAnswer.builder()
					.questionBank(questionBankMap.get(questionAnswerVo.getQuestionBankName()))
					.build();		
			BeanUtils.copyProperties(questionAnswerVo, questionAnswer);
			questionAnswerList.add(questionAnswer);
		}
		return questionBankRepo.saveAll(questionAnswerList);
	}

	public void deleteQuestionAnswer(Long id) {
		questionBankRepo.deleteById(id);
	}

	public void deleteByQuestionBankId(Long id) {
		questionBankRepo.deleteByQuestionBankId(id);
	}

	public QuestionAnswer updateQuestionAnswer(QuestionAnswerVo questionAnswerVo) {
		QuestionBank questionBank = questionBankService.getQuestionBank(questionAnswerVo.getQuestionBankId());
		QuestionAnswer questionAnswer = QuestionAnswer.builder()
				.questionBank(questionBank)
				.build();		
		BeanUtils.copyProperties(questionAnswerVo, questionAnswer);
		return questionBankRepo.save(questionAnswer);
	}

	public List<QuestionAnswer> updateAllQuestionAnswer(List<QuestionAnswerVo> questionAnswerVoList) {
		List<QuestionAnswer> questionAnswerList = new ArrayList<>();
		List<String> questionBankList = questionAnswerVoList.stream().map(mapper->mapper.getQuestionBankName()).collect(Collectors.toList());
		Map<String, QuestionBank> questionBankMap = new HashMap<>();
		questionBankService.getQuestionBankList(questionBankList).stream().forEach(questionBank-> {
			questionBankMap.put(questionBank.getQuestionBankName(), questionBank);
		});		
		for( QuestionAnswerVo  questionAnswerVo  :  questionAnswerVoList ) {
			QuestionAnswer questionAnswer = QuestionAnswer.builder()
					.questionBank(questionBankMap.get(questionAnswerVo.getQuestionBankName()))
					.build();		
			BeanUtils.copyProperties(questionAnswerVo, questionAnswer);
			questionAnswerList.add(questionAnswer);
		}
		return questionBankRepo.saveAll(questionAnswerList);
	}

	public long getQuestionAnswerCount() {
		return questionBankRepo.count();
	}	

	public long getCountByQuestionBank(Long questionBankId) {
		return questionBankRepo.countByQuestionBankId(questionBankId);
	}	

	public List<QuestionAnswer> getByQuestionBank(QuestionAnswerVo questionAnswerVo) {
		Pageable pageable =  PageRequest.of(questionAnswerVo.getOffset(), questionAnswerVo.getLimit(), Sort.by(MooduleConductConstants.QUESTION));
		Optional<List<QuestionAnswer>> questionBankList = questionBankRepo.findByQuestionBankId(questionAnswerVo.getId(),pageable);
		return questionBankList.isPresent() ? questionBankList.get() : Collections.emptyList(); 
	}

	public Map<String, Object> searchQuestionAnswer(QuestionAnswerVo questionAnswerVo) {
		Pageable pageable =  PageRequest.of(questionAnswerVo.getOffset(), questionAnswerVo.getLimit(), Sort.by(MooduleConductConstants.QUESTION));
		Page<QuestionAnswer> questionPage = questionBankRepo.findByQuestionContainingIgnoreCase(questionAnswerVo.getQuestion(), pageable);
		Map<String,Object > resultMap = new HashMap<>();
		resultMap.put(MooduleConductConstants.VALUE, questionPage.getContent());
		resultMap.put(MooduleConductConstants.COUNT, questionPage.getTotalElements());
		return resultMap ;
	}

	public Map<String, Object> getAllQuestionAnswer(QuestionAnswerVo questionAnswerVo) {
		Pageable pageable =  PageRequest.of(questionAnswerVo.getOffset(), questionAnswerVo.getLimit(), Sort.by(MooduleConductConstants.QUESTION));
		Page<QuestionAnswer> questionPage = questionBankRepo.findAll(pageable);
		Map<String,Object > resultMap = new HashMap<>();
		resultMap.put(MooduleConductConstants.VALUE, questionPage.getContent());
		resultMap.put(MooduleConductConstants.COUNT, questionPage.getTotalElements());		
		return resultMap ;

	}


}
