package org.foryou.moodleconduct.service;

import java.util.Collections;
import java.util.List;
import java.util.Optional;

import org.foryou.moodleconduct.dao.entity.QuestionAnswer;
import org.foryou.moodleconduct.dao.entity.TestResult;
import org.foryou.moodleconduct.dao.entity.UserAuthorityInfo;
import org.foryou.moodleconduct.dao.repository.QuestionAnswerRepo;
import org.foryou.moodleconduct.dao.repository.TestResultRepository;
import org.foryou.moodleconduct.dao.repository.UserAuthorityInfoRepository;
import org.foryou.moodleconduct.dao.vo.TestResultVo;
import org.foryou.moodleconduct.utils.storage.CookieSessionStorage;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.ObjectUtils;

@Service
public class TestResultService {

	@Autowired
	private TestResultRepository testResultRepository;

	@Autowired
	private UserAuthorityInfoRepository userAuthorityInfoRepo;

	@Autowired
	private QuestionAnswerRepo questionAnswerRepo;

	public TestResult addTestReult(TestResultVo testResultVo) {		
		String sessionUser = null;
		if(!ObjectUtils.isEmpty(CookieSessionStorage.get())) {
			sessionUser = CookieSessionStorage.get().getUserName();
		}
		UserAuthorityInfo userAuthorityInfo = userAuthorityInfoRepo.findByUserCredentialsId(testResultVo.getUserAuthId());
		Optional<QuestionAnswer> questionAnswer = questionAnswerRepo.findById(testResultVo.getQuestionId());
		TestResult testResult = TestResult.builder()
				.createUser(sessionUser)
				.updateUser(sessionUser)
				.userAuthorityInfo(userAuthorityInfo)
				.questionAnswer(questionAnswer.isPresent() ? questionAnswer.get() : null )
				.build();
		BeanUtils.copyProperties(testResultVo, testResult);
		return testResultRepository.save(testResult);
	}

	public void  deleteTestResult(Long id) {	
		testResultRepository.deleteById(id);
	}

	public List<TestResult> addTestReultList(List<TestResultVo> testResultVoList) {	
		String sessionUser = null;
		if(!ObjectUtils.isEmpty(CookieSessionStorage.get())) {
			sessionUser = CookieSessionStorage.get().getUserName();
		}
		List<TestResult> testResultList = Collections.emptyList();
		for( TestResultVo testResultVo :   testResultVoList ) {
			UserAuthorityInfo userAuthorityInfo = userAuthorityInfoRepo.findByUserCredentialsId(testResultVo.getUserAuthId());
			Optional<QuestionAnswer> questionAnswer = questionAnswerRepo.findById(testResultVo.getQuestionId());
			testResultList.add(TestResult.builder()
					.createUser(sessionUser)
					.updateUser(sessionUser)
					.userAuthorityInfo(userAuthorityInfo)
					.questionAnswer(questionAnswer.isPresent() ? questionAnswer.get() : null )
					.build());
		};
		return testResultRepository.saveAll(testResultList);
	}

	public List<TestResult> getByAssignmentId(Long testId) {
		Optional<List<TestResult>> resultList = testResultRepository.findByTestAssignmentId(testId);
		return resultList.isPresent() ? resultList.get() : Collections.emptyList();

	}



}
