package org.foryou.moodleconduct.service;





import java.sql.Date;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import org.apache.commons.lang3.time.DateUtils;
import org.foryou.moodleconduct.dao.entity.QuestionBank;
import org.foryou.moodleconduct.dao.entity.TestAssignment;
import org.foryou.moodleconduct.dao.entity.UserAuthorityInfo;
import org.foryou.moodleconduct.dao.enumclass.StatusType;
import org.foryou.moodleconduct.dao.repository.TestAssignmentRepository;
import org.foryou.moodleconduct.dao.repository.UserAuthorityInfoRepository;
import org.foryou.moodleconduct.dao.vo.TestAssignmentVo;
import org.foryou.moodleconduct.utils.storage.CookieSessionStorage;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.stereotype.Service;
import org.springframework.util.ObjectUtils;



@Service
public class TestAssignmentService {

	@Autowired
	private TestAssignmentRepository testAssignmentRepository;

	@Autowired
	private UserAuthorityInfoRepository userAuthorityInfoRepo;
	
	@Autowired
	private ScheduleExecutorService scheduleExecutorService;

	public TestAssignment addTestAssignment(TestAssignmentVo testAssignmentVo ) {		
		String sessionUser = null;
		if(!ObjectUtils.isEmpty(CookieSessionStorage.get())) {
			sessionUser = CookieSessionStorage.get().getUserName();			
		}
		if(checkTestAssignmentExists(testAssignmentVo)) {
			throw new DuplicateKeyException("Test already assiged and unattended."
					+ " So Test cannot be assigned.");
		}
		QuestionBank questionBank = QuestionBank.builder().id(testAssignmentVo.getQuestionBankId()).build();
		UserAuthorityInfo userAuthorityInfo =  userAuthorityInfoRepo.findByUserCredentialsId(testAssignmentVo.getUserAuthId());
		
		testAssignmentVo.setTestStartTime(new Timestamp(System.currentTimeMillis()));
		testAssignmentVo.setTestEndTime(new Timestamp(DateUtils.addMinutes(new Date(System.currentTimeMillis()) ,2).getTime()));
	
		TestAssignment testAssignment = TestAssignment.builder()
				.createUser(sessionUser).updateUser(sessionUser)
				.status(StatusType.NEW.getType())
				.questionBank(questionBank)
				.userAuthorityInfo(userAuthorityInfo)
				.build();
		BeanUtils.copyProperties(testAssignmentVo, testAssignment);
		TestAssignment result = testAssignmentRepository.save(testAssignment);
		scheduleExecutorService.schedule(result.getTestStartTime(), result.getTestEndTime(), Arrays.asList(result.getId()));
		return result;

	}

	private boolean checkTestAssignmentExists(TestAssignmentVo testAssignmentVo) {
		return testAssignmentRepository
				.existsByUserAuthorityInfoIdAndQuestionBankIdAndStatusIn
				(testAssignmentVo.getUserAuthId(),testAssignmentVo.getQuestionBankId(),Arrays.asList(StatusType.NEW.getType(),StatusType.INPROGRESS.getType()));
	}


	public TestAssignment getTestAssignment(Long id) {
		Optional<TestAssignment> testAssignment = testAssignmentRepository.findById(id);
		return testAssignment.isPresent() ? testAssignment.get() : null;
	}

	public List<TestAssignment> getTestAssignmentList() {
		List<TestAssignment> testAssignment = testAssignmentRepository.findAll();
		return testAssignment;
	}

	public TestAssignment getByTestStatus(String status) {
		return testAssignmentRepository.findByStatus(status);
	}	

	public void updateExpiredStatus(List<Long> assigneeListList) {
		testAssignmentRepository.updateExpiredStatus(assigneeListList);
	}

	public void deleteTestAssignment(Long id) {
		testAssignmentRepository.deleteById(id);
	}




}
